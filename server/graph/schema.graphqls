type Measurement {
    hum: Float!
    temp: Float!
    moist: Float!
    with_irrigation: Boolean!
}

type MeasurementQuery {
    id: Int
    timestamp: Timestamp
    hum: Float
    temp: Float
    moist: Float
    with_irrigation: Boolean
}

type Settings {
    limits_trigger: Boolean!
    water_level_limit: Float!
    water_amount_limit: Float!
    moist_limit: Float!
    scheduled_trigger: Boolean!
    hour_range: Int!
    location: String!
    irrigation_duration: Boolean!
    chart_type: Boolean!
    language: Boolean!
    theme: Boolean!
    lat: Float!
    lon: Float!
}

type SettingsQuery {
    id: Int
    limits_trigger: Boolean
    water_level_limit: Float
    water_amount_limit: Float
    moist_limit: Float
    scheduled_trigger: Boolean
    hour_range: Int
    location: String
    irrigation_duration: Boolean
    chart_type: Boolean
    language: Boolean
    theme: Boolean
}

type IrrigationQuery {
    id: Int
    timestamp: Timestamp
    water_level: Float
    water_amount: Float
    water_overdrawn: Float
}

# TODO: vymyslet query pomoci timestamp range somehow

type Query {
    getMeasurements: [MeasurementQuery!]
    getSettings: [SettingsQuery!]
    getIrrigation: [IrrigationQuery!]
}

# vymrdat in favor of Measurement type ???
input NewMeasurement {
    hum: Float!
    temp: Float!
    moist: Float!
    with_irrigation: Boolean!
}

input NewSettings {
    limits_trigger: Boolean!
    water_level_limit: Float!
    water_amount_limit: Float!
    moist_limit: Float!
    scheduled_trigger: Boolean!
    hour_range: Int!
    location: String!
    irrigation_duration: Boolean!
    chart_type: Boolean!
    language: Boolean!
    theme: Boolean!
    lat: Float!
    lon: Float!
}

type Mutation {
    createMeasurement(input: NewMeasurement): Measurement!
    createSettings(input: NewSettings): Settings!
    updateSettings(input: NewSettings): Settings!
}

scalar Timestamp